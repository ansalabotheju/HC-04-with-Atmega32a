
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000390  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000404  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004e  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000321  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000143  00000000  00000000  00000793  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000259  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013f  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000136  00000000  00000000  00000caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  74:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
#define  Echo_pin_1	PB6

volatile int TimerOverflow = 0;

ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	TimerOverflow++;
  8a:	80 91 60 00 	lds	r24, 0x0060
  8e:	90 91 61 00 	lds	r25, 0x0061
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	90 93 61 00 	sts	0x0061, r25
  98:	80 93 60 00 	sts	0x0060, r24

}
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <distance_cal>:
	
	}
	
}

int distance_cal(int trig_pin, int echo_pin){
  aa:	78 2f       	mov	r23, r24
		int count_1=0;
		int overflow =0;
		double distance_value =0;
			
		//setting up TIMER0 For time measurements
		TCNT0 = 0;
  ac:	12 be       	out	0x32, r1	; 50
		TCCR0 |= (1<<CS01); // PRESCALER 8
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	83 bf       	out	0x33, r24	; 51
		TIMSK = (1<<TOIE0);// enable TIMER) overflow Interrupt
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	89 bf       	out	0x39, r24	; 57
		sei();// enable global Interrupts
  b8:	78 94       	sei
  ba:	84 ef       	ldi	r24, 0xF4	; 244
  bc:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	28 ec       	ldi	r18, 0xC8	; 200
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <distance_cal+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d9 f7       	brne	.-10     	; 0xc2 <distance_cal+0x18>
		_delay_ms(50);

		/* Make a 15us trigger pulse on trig pin_1 to HC-SR05 */
		PORTB =0x00;
  cc:	18 ba       	out	0x18, r1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ce:	3a e1       	ldi	r19, 0x1A	; 26
  d0:	83 2f       	mov	r24, r19
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <distance_cal+0x28>
		_delay_us(10);
		PORTB |= 1<<trig_pin;
  d6:	28 b3       	in	r18, 0x18	; 24
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	ca 01       	movw	r24, r20
  de:	02 c0       	rjmp	.+4      	; 0xe4 <distance_cal+0x3a>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	7a 95       	dec	r23
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <distance_cal+0x36>
  e8:	28 2b       	or	r18, r24
  ea:	28 bb       	out	0x18, r18	; 24
  ec:	3a 95       	dec	r19
  ee:	f1 f7       	brne	.-4      	; 0xec <distance_cal+0x42>
		_delay_us(10);
		PORTB &= ~(1<<trig_pin);
  f0:	28 b3       	in	r18, 0x18	; 24
  f2:	80 95       	com	r24
  f4:	82 23       	and	r24, r18
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <distance_cal+0x54>
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <distance_cal+0x50>
		//6cm-->> 176us
		//600cm-->>17647us

		/* Wait for rising edge */
		while(1){
			if(!(PINB & (1<<echo_pin))){continue;}
 102:	86 b3       	in	r24, 0x16	; 22
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	84 23       	and	r24, r20
 108:	95 23       	and	r25, r21
 10a:	89 2b       	or	r24, r25
 10c:	d1 f3       	breq	.-12     	; 0x102 <distance_cal+0x58>
			else{
				TCNT0 =0;
 10e:	12 be       	out	0x32, r1	; 50
				TimerOverflow=0;
 110:	10 92 61 00 	sts	0x0061, r1
 114:	10 92 60 00 	sts	0x0060, r1
				break;}
			}
		
		/* Wait for falling edge */
		while (1){
			if(PINB & (1<<echo_pin)){continue;}
 118:	86 b3       	in	r24, 0x16	; 22
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	84 23       	and	r24, r20
 11e:	95 23       	and	r25, r21
 120:	89 2b       	or	r24, r25
 122:	d1 f7       	brne	.-12     	; 0x118 <distance_cal+0x6e>
			else{
				count_1 = TCNT0 ;
 124:	22 b7       	in	r18, 0x32	; 50
 126:	30 e0       	ldi	r19, 0x00	; 0
				overflow = TimerOverflow;
 128:	80 91 60 00 	lds	r24, 0x0060
 12c:	90 91 61 00 	lds	r25, 0x0061
				break;}
			}

		cli();//disable global Interrupts
 130:	f8 94       	cli
 132:	98 2f       	mov	r25, r24
 134:	88 27       	eor	r24, r24
 136:	82 0f       	add	r24, r18
 138:	93 1f       	adc	r25, r19
 13a:	6a e3       	ldi	r22, 0x3A	; 58
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 9f 01 	call	0x33e	; 0x33e <__divmodhi4>
 142:	88 27       	eor	r24, r24
 144:	77 fd       	sbrc	r23, 7
 146:	80 95       	com	r24
 148:	98 2f       	mov	r25, r24
 14a:	0e 94 17 01 	call	0x22e	; 0x22e <__floatsisf>
 14e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__fixsfsi>
		count_1 = count_1+ 256*(overflow);

		distance_value = count_1/58;// distance calculation  : distance in Centimeters

		return distance_value;
}
 152:	cb 01       	movw	r24, r22
 154:	08 95       	ret

00000156 <main>:
{
	TimerOverflow++;

}

int main(void){
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29

	double distance_1;
	double distance_2;
	DDRB =0xA8;
 15c:	88 ea       	ldi	r24, 0xA8	; 168
 15e:	87 bb       	out	0x17, r24	; 23
	DDRC =0xff;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	84 bb       	out	0x14, r24	; 20
		
		
		distance_1 = distance_cal(Trigger_pin_1,Echo_pin_1);
		
		if (distance_1<=10){
			DDRA =1<<5;
 164:	10 e2       	ldi	r17, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 166:	c8 ec       	ldi	r28, 0xC8	; 200
 168:	d0 e0       	ldi	r29, 0x00	; 0

	while (1){	
	
		
		
		distance_1 = distance_cal(Trigger_pin_1,Echo_pin_1);
 16a:	87 e0       	ldi	r24, 0x07	; 7
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	66 e0       	ldi	r22, 0x06	; 6
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 55 00 	call	0xaa	; 0xaa <distance_cal>
		
		if (distance_1<=10){
 176:	aa 27       	eor	r26, r26
 178:	97 fd       	sbrc	r25, 7
 17a:	a0 95       	com	r26
 17c:	ba 2f       	mov	r27, r26
 17e:	bc 01       	movw	r22, r24
 180:	cd 01       	movw	r24, r26
 182:	0e 94 17 01 	call	0x22e	; 0x22e <__floatsisf>
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	40 e2       	ldi	r20, 0x20	; 32
 18c:	51 e4       	ldi	r21, 0x41	; 65
 18e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <__cmpsf2>
 192:	18 16       	cp	r1, r24
 194:	94 f0       	brlt	.+36     	; 0x1ba <main+0x64>
			DDRA =1<<5;
 196:	1a bb       	out	0x1a, r17	; 26
			PORTA = 1<<5;
 198:	1b bb       	out	0x1b, r17	; 27
 19a:	88 ee       	ldi	r24, 0xE8	; 232
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	fe 01       	movw	r30, r28
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a6:	d9 f7       	brne	.-10     	; 0x19e <main+0x48>
			_delay_ms(100);
			PORTA =0<<5;
 1a8:	1b ba       	out	0x1b, r1	; 27
 1aa:	88 ee       	ldi	r24, 0xE8	; 232
 1ac:	93 e0       	ldi	r25, 0x03	; 3
 1ae:	fe 01       	movw	r30, r28
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b6:	d9 f7       	brne	.-10     	; 0x1ae <main+0x58>
 1b8:	d8 cf       	rjmp	.-80     	; 0x16a <main+0x14>
			_delay_ms(100);
		}else{
			DDRA = 0<<5;
 1ba:	1a ba       	out	0x1a, r1	; 26
			PORTA =0<<5;
 1bc:	1b ba       	out	0x1b, r1	; 27
 1be:	d5 cf       	rjmp	.-86     	; 0x16a <main+0x14>

000001c0 <__cmpsf2>:
 1c0:	71 d0       	rcall	.+226    	; 0x2a4 <__fp_cmp>
 1c2:	08 f4       	brcc	.+2      	; 0x1c6 <__cmpsf2+0x6>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	08 95       	ret

000001c8 <__fixsfsi>:
 1c8:	04 d0       	rcall	.+8      	; 0x1d2 <__fixunssfsi>
 1ca:	68 94       	set
 1cc:	b1 11       	cpse	r27, r1
 1ce:	b1 c0       	rjmp	.+354    	; 0x332 <__fp_szero>
 1d0:	08 95       	ret

000001d2 <__fixunssfsi>:
 1d2:	94 d0       	rcall	.+296    	; 0x2fc <__fp_splitA>
 1d4:	88 f0       	brcs	.+34     	; 0x1f8 <__fixunssfsi+0x26>
 1d6:	9f 57       	subi	r25, 0x7F	; 127
 1d8:	90 f0       	brcs	.+36     	; 0x1fe <__fixunssfsi+0x2c>
 1da:	b9 2f       	mov	r27, r25
 1dc:	99 27       	eor	r25, r25
 1de:	b7 51       	subi	r27, 0x17	; 23
 1e0:	a0 f0       	brcs	.+40     	; 0x20a <__fixunssfsi+0x38>
 1e2:	d1 f0       	breq	.+52     	; 0x218 <__fixunssfsi+0x46>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	88 1f       	adc	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	1a f0       	brmi	.+6      	; 0x1f4 <__fixunssfsi+0x22>
 1ee:	ba 95       	dec	r27
 1f0:	c9 f7       	brne	.-14     	; 0x1e4 <__fixunssfsi+0x12>
 1f2:	12 c0       	rjmp	.+36     	; 0x218 <__fixunssfsi+0x46>
 1f4:	b1 30       	cpi	r27, 0x01	; 1
 1f6:	81 f0       	breq	.+32     	; 0x218 <__fixunssfsi+0x46>
 1f8:	9b d0       	rcall	.+310    	; 0x330 <__fp_zero>
 1fa:	b1 e0       	ldi	r27, 0x01	; 1
 1fc:	08 95       	ret
 1fe:	98 c0       	rjmp	.+304    	; 0x330 <__fp_zero>
 200:	67 2f       	mov	r22, r23
 202:	78 2f       	mov	r23, r24
 204:	88 27       	eor	r24, r24
 206:	b8 5f       	subi	r27, 0xF8	; 248
 208:	39 f0       	breq	.+14     	; 0x218 <__fixunssfsi+0x46>
 20a:	b9 3f       	cpi	r27, 0xF9	; 249
 20c:	cc f3       	brlt	.-14     	; 0x200 <__fixunssfsi+0x2e>
 20e:	86 95       	lsr	r24
 210:	77 95       	ror	r23
 212:	67 95       	ror	r22
 214:	b3 95       	inc	r27
 216:	d9 f7       	brne	.-10     	; 0x20e <__fixunssfsi+0x3c>
 218:	3e f4       	brtc	.+14     	; 0x228 <__fixunssfsi+0x56>
 21a:	90 95       	com	r25
 21c:	80 95       	com	r24
 21e:	70 95       	com	r23
 220:	61 95       	neg	r22
 222:	7f 4f       	sbci	r23, 0xFF	; 255
 224:	8f 4f       	sbci	r24, 0xFF	; 255
 226:	9f 4f       	sbci	r25, 0xFF	; 255
 228:	08 95       	ret

0000022a <__floatunsisf>:
 22a:	e8 94       	clt
 22c:	09 c0       	rjmp	.+18     	; 0x240 <__floatsisf+0x12>

0000022e <__floatsisf>:
 22e:	97 fb       	bst	r25, 7
 230:	3e f4       	brtc	.+14     	; 0x240 <__floatsisf+0x12>
 232:	90 95       	com	r25
 234:	80 95       	com	r24
 236:	70 95       	com	r23
 238:	61 95       	neg	r22
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	8f 4f       	sbci	r24, 0xFF	; 255
 23e:	9f 4f       	sbci	r25, 0xFF	; 255
 240:	99 23       	and	r25, r25
 242:	a9 f0       	breq	.+42     	; 0x26e <__floatsisf+0x40>
 244:	f9 2f       	mov	r31, r25
 246:	96 e9       	ldi	r25, 0x96	; 150
 248:	bb 27       	eor	r27, r27
 24a:	93 95       	inc	r25
 24c:	f6 95       	lsr	r31
 24e:	87 95       	ror	r24
 250:	77 95       	ror	r23
 252:	67 95       	ror	r22
 254:	b7 95       	ror	r27
 256:	f1 11       	cpse	r31, r1
 258:	f8 cf       	rjmp	.-16     	; 0x24a <__floatsisf+0x1c>
 25a:	fa f4       	brpl	.+62     	; 0x29a <__floatsisf+0x6c>
 25c:	bb 0f       	add	r27, r27
 25e:	11 f4       	brne	.+4      	; 0x264 <__floatsisf+0x36>
 260:	60 ff       	sbrs	r22, 0
 262:	1b c0       	rjmp	.+54     	; 0x29a <__floatsisf+0x6c>
 264:	6f 5f       	subi	r22, 0xFF	; 255
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	8f 4f       	sbci	r24, 0xFF	; 255
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	16 c0       	rjmp	.+44     	; 0x29a <__floatsisf+0x6c>
 26e:	88 23       	and	r24, r24
 270:	11 f0       	breq	.+4      	; 0x276 <__floatsisf+0x48>
 272:	96 e9       	ldi	r25, 0x96	; 150
 274:	11 c0       	rjmp	.+34     	; 0x298 <__floatsisf+0x6a>
 276:	77 23       	and	r23, r23
 278:	21 f0       	breq	.+8      	; 0x282 <__floatsisf+0x54>
 27a:	9e e8       	ldi	r25, 0x8E	; 142
 27c:	87 2f       	mov	r24, r23
 27e:	76 2f       	mov	r23, r22
 280:	05 c0       	rjmp	.+10     	; 0x28c <__floatsisf+0x5e>
 282:	66 23       	and	r22, r22
 284:	71 f0       	breq	.+28     	; 0x2a2 <__floatsisf+0x74>
 286:	96 e8       	ldi	r25, 0x86	; 134
 288:	86 2f       	mov	r24, r22
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	2a f0       	brmi	.+10     	; 0x29a <__floatsisf+0x6c>
 290:	9a 95       	dec	r25
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	88 1f       	adc	r24, r24
 298:	da f7       	brpl	.-10     	; 0x290 <__floatsisf+0x62>
 29a:	88 0f       	add	r24, r24
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	97 f9       	bld	r25, 7
 2a2:	08 95       	ret

000002a4 <__fp_cmp>:
 2a4:	99 0f       	add	r25, r25
 2a6:	00 08       	sbc	r0, r0
 2a8:	55 0f       	add	r21, r21
 2aa:	aa 0b       	sbc	r26, r26
 2ac:	e0 e8       	ldi	r30, 0x80	; 128
 2ae:	fe ef       	ldi	r31, 0xFE	; 254
 2b0:	16 16       	cp	r1, r22
 2b2:	17 06       	cpc	r1, r23
 2b4:	e8 07       	cpc	r30, r24
 2b6:	f9 07       	cpc	r31, r25
 2b8:	c0 f0       	brcs	.+48     	; 0x2ea <__fp_cmp+0x46>
 2ba:	12 16       	cp	r1, r18
 2bc:	13 06       	cpc	r1, r19
 2be:	e4 07       	cpc	r30, r20
 2c0:	f5 07       	cpc	r31, r21
 2c2:	98 f0       	brcs	.+38     	; 0x2ea <__fp_cmp+0x46>
 2c4:	62 1b       	sub	r22, r18
 2c6:	73 0b       	sbc	r23, r19
 2c8:	84 0b       	sbc	r24, r20
 2ca:	95 0b       	sbc	r25, r21
 2cc:	39 f4       	brne	.+14     	; 0x2dc <__fp_cmp+0x38>
 2ce:	0a 26       	eor	r0, r26
 2d0:	61 f0       	breq	.+24     	; 0x2ea <__fp_cmp+0x46>
 2d2:	23 2b       	or	r18, r19
 2d4:	24 2b       	or	r18, r20
 2d6:	25 2b       	or	r18, r21
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <__fp_cmp+0x3e>
 2da:	08 95       	ret
 2dc:	0a 26       	eor	r0, r26
 2de:	09 f4       	brne	.+2      	; 0x2e2 <__fp_cmp+0x3e>
 2e0:	a1 40       	sbci	r26, 0x01	; 1
 2e2:	a6 95       	lsr	r26
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	81 1d       	adc	r24, r1
 2e8:	81 1d       	adc	r24, r1
 2ea:	08 95       	ret

000002ec <__fp_split3>:
 2ec:	57 fd       	sbrc	r21, 7
 2ee:	90 58       	subi	r25, 0x80	; 128
 2f0:	44 0f       	add	r20, r20
 2f2:	55 1f       	adc	r21, r21
 2f4:	59 f0       	breq	.+22     	; 0x30c <__fp_splitA+0x10>
 2f6:	5f 3f       	cpi	r21, 0xFF	; 255
 2f8:	71 f0       	breq	.+28     	; 0x316 <__fp_splitA+0x1a>
 2fa:	47 95       	ror	r20

000002fc <__fp_splitA>:
 2fc:	88 0f       	add	r24, r24
 2fe:	97 fb       	bst	r25, 7
 300:	99 1f       	adc	r25, r25
 302:	61 f0       	breq	.+24     	; 0x31c <__fp_splitA+0x20>
 304:	9f 3f       	cpi	r25, 0xFF	; 255
 306:	79 f0       	breq	.+30     	; 0x326 <__fp_splitA+0x2a>
 308:	87 95       	ror	r24
 30a:	08 95       	ret
 30c:	12 16       	cp	r1, r18
 30e:	13 06       	cpc	r1, r19
 310:	14 06       	cpc	r1, r20
 312:	55 1f       	adc	r21, r21
 314:	f2 cf       	rjmp	.-28     	; 0x2fa <__fp_split3+0xe>
 316:	46 95       	lsr	r20
 318:	f1 df       	rcall	.-30     	; 0x2fc <__fp_splitA>
 31a:	08 c0       	rjmp	.+16     	; 0x32c <__fp_splitA+0x30>
 31c:	16 16       	cp	r1, r22
 31e:	17 06       	cpc	r1, r23
 320:	18 06       	cpc	r1, r24
 322:	99 1f       	adc	r25, r25
 324:	f1 cf       	rjmp	.-30     	; 0x308 <__fp_splitA+0xc>
 326:	86 95       	lsr	r24
 328:	71 05       	cpc	r23, r1
 32a:	61 05       	cpc	r22, r1
 32c:	08 94       	sec
 32e:	08 95       	ret

00000330 <__fp_zero>:
 330:	e8 94       	clt

00000332 <__fp_szero>:
 332:	bb 27       	eor	r27, r27
 334:	66 27       	eor	r22, r22
 336:	77 27       	eor	r23, r23
 338:	cb 01       	movw	r24, r22
 33a:	97 f9       	bld	r25, 7
 33c:	08 95       	ret

0000033e <__divmodhi4>:
 33e:	97 fb       	bst	r25, 7
 340:	09 2e       	mov	r0, r25
 342:	07 26       	eor	r0, r23
 344:	0a d0       	rcall	.+20     	; 0x35a <__divmodhi4_neg1>
 346:	77 fd       	sbrc	r23, 7
 348:	04 d0       	rcall	.+8      	; 0x352 <__divmodhi4_neg2>
 34a:	0c d0       	rcall	.+24     	; 0x364 <__udivmodhi4>
 34c:	06 d0       	rcall	.+12     	; 0x35a <__divmodhi4_neg1>
 34e:	00 20       	and	r0, r0
 350:	1a f4       	brpl	.+6      	; 0x358 <__divmodhi4_exit>

00000352 <__divmodhi4_neg2>:
 352:	70 95       	com	r23
 354:	61 95       	neg	r22
 356:	7f 4f       	sbci	r23, 0xFF	; 255

00000358 <__divmodhi4_exit>:
 358:	08 95       	ret

0000035a <__divmodhi4_neg1>:
 35a:	f6 f7       	brtc	.-4      	; 0x358 <__divmodhi4_exit>
 35c:	90 95       	com	r25
 35e:	81 95       	neg	r24
 360:	9f 4f       	sbci	r25, 0xFF	; 255
 362:	08 95       	ret

00000364 <__udivmodhi4>:
 364:	aa 1b       	sub	r26, r26
 366:	bb 1b       	sub	r27, r27
 368:	51 e1       	ldi	r21, 0x11	; 17
 36a:	07 c0       	rjmp	.+14     	; 0x37a <__udivmodhi4_ep>

0000036c <__udivmodhi4_loop>:
 36c:	aa 1f       	adc	r26, r26
 36e:	bb 1f       	adc	r27, r27
 370:	a6 17       	cp	r26, r22
 372:	b7 07       	cpc	r27, r23
 374:	10 f0       	brcs	.+4      	; 0x37a <__udivmodhi4_ep>
 376:	a6 1b       	sub	r26, r22
 378:	b7 0b       	sbc	r27, r23

0000037a <__udivmodhi4_ep>:
 37a:	88 1f       	adc	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	5a 95       	dec	r21
 380:	a9 f7       	brne	.-22     	; 0x36c <__udivmodhi4_loop>
 382:	80 95       	com	r24
 384:	90 95       	com	r25
 386:	bc 01       	movw	r22, r24
 388:	cd 01       	movw	r24, r26
 38a:	08 95       	ret

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
